/*
Package rest standardizes on structured error responses: a request that fails because of an
invalid input or an unexpected condition produces a response that contains a structured error.

The error data structures returned to clients contains five fields: an ID, a code, a status, a
detail and metadata. The ID is unique for the occurrence of the error, it helps correlate the
content of the response with the content of the service logs. The code defines the class of error
(e.g.  "invalid_parameter_type") and the status the corresponding HTTP status (e.g. 400). The detail
contains a message specific to the error occurrence. The metadata contains key/value pairs that
provide contextual information (name of parameters, value of invalid parameter etc.).

Instances of Error can be created via Error Class functions.
See http://goa.design/implement/error_handling.html
All instance of errors created via a error class implement the Error interface. This
interface is leveraged by the error handler middleware to produce the error responses.

The code generated by goagen calls the helper functions exposed in this file when it encounters
invalid data (wrong type, validation errors etc.) such as InvalidParamTypeError,
InvalidAttributeTypeError etc. These methods return errors that get merged with any previously
encountered error via the Error Merge method. The helper functions are error classes stored in
global variable. This means your code can override their values to produce arbitrary error
responses.

goa includes an error handler middleware that takes care of mapping back any error returned by
previously called middleware or action handler into HTTP responses. If the error was created via an
error class then the corresponding content including the HTTP status is used otherwise an internal
error is returned. Errors that bubble up all the way to the top (i.e. not handled by the error
middleware) also generate an internal error response.
*/
package rest

import "github.com/goadesign/goa"

const (
	// StatusUnauthorized indicates the request is not authorized.
	StatusUnauthorized = goa.StatusBug + 1
	// StatusNotFound caries the same semantic as HTTP status code 404.
	StatusNotFound
	// StatusRequestBodyTooLarge indicates that the request body exceeded the maximum value
	// permitted by the HTTP server.
	StatusRequestBodyTooLarge
)

var (
	// ErrorMediaIdentifier is the media type identifier used for error responses.
	ErrorMediaIdentifier = "application/vnd.goa.error"

	// ErrBadRequest is a generic bad request error.
	ErrBadRequest = NewErrorClass("bad_request", goa.StatusInvalid)

	// ErrUnauthorized is a generic unauthorized error.
	ErrUnauthorized = NewErrorClass("unauthorized", StatusUnauthorized)

	// ErrInvalidRequest is the class of errors produced by the generated code when a request
	// parameter or payload fails to validate.
	ErrInvalidRequest = NewErrorClass("invalid_request", goa.StatusInvalid)

	// ErrInvalidEncoding is the error produced when a request body fails to be decoded.
	ErrInvalidEncoding = NewErrorClass("invalid_encoding", goa.StatusInvalid)

	// ErrRequestBodyTooLarge is the error produced when the size of a request body exceeds
	// MaxRequestBodyLength bytes.
	ErrRequestBodyTooLarge = NewErrorClass("request_too_large", StatusRequestBodyTooLarge)

	// ErrInvalidFile is the error produced by ServeFiles when requested to serve non-existant
	// or non-readable files.
	ErrInvalidFile = NewErrorClass("invalid_file", StatusNotFound)

	// ErrNotFound is the error returned to requests that don't match a registered handler.
	ErrNotFound = NewErrorClass("not_found", StatusNotFound)

	// ErrInternal is the class of error used for uncaught errors.
	ErrInternal = NewErrorClass("internal", goa.StatusBug)
)

type (
	// ErrorResponse contains the details of a error response.
	// This struct is mainly intended for clients to decode error responses.
	ErrorResponse struct {
		// ID is the unique error instance identifier.
		ID string `json:"id" xml:"id" form:"id"`
		// Code identifies the class of errors.
		Code string `json:"code" xml:"code" form:"code"`
		// Status is the HTTP status code used by responses that cary the error.
		Status int `json:"status" xml:"status" form:"status"`
		// Detail describes the specific error occurrence.
		Detail string `json:"detail" xml:"detail" form:"detail"`
		// Data contains additional key/value pairs useful to clients.
		Data []map[string]interface{} `json:"meta,omitempty" xml:"meta,omitempty" form:"meta,omitempty"`
	}
)

// NewErrorResponse creates a HTTP response from the given goa Error.
func NewErrorResponse(err goa.Error) *ErrorResponse {
	return &ErrorResponse{
		ID:     err.Token(),
		Code:   err.Code(),
		Status: HTTPStatus(err.Status()),
		Detail: err.Detail(),
		Data:   err.Data(),
	}
}

// HTTPStatus converts the goa error status to a HTTP status code.
func HTTPStatus(status goa.ErrorStatus) int {
	switch status {
	case goa.StatusInvalid:
		return http.StatusBadRequest
	case goa.StatusBug:
		return http.StatusInternalError
	case StatusNotFound:
		return http.StatusNotFound
	case StatusRequestBodyTooLarge:
		return http.StatusRequestBodyTooLarge
	default:
		return http.StatusInternalError
	}
}
